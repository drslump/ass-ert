!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.ass=e()}}(function(){return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module){(function(global){function ass(value){return 0===arguments.length?new Chain:new Chain(value)}var _="undefined"!=typeof window?window._:"undefined"!=typeof global?global._:null,Chain=require("./chain"),Matcher=require("./matcher"),AssError=require("./error"),should=(require("./util"),require("./should")),defProp=Object.defineProperty.bind(Object);ass._=function(value){return new Chain(value)._},ass.matchers=[],defProp(ass,"help",{get:function(){var s="";return _.forEach(ass.matchers,function(matcher){var fn=matcher.test.toString(),args=fn.replace(/^function\s*\(([^\)]*)\)[\S\s]*/,"$1");args=args.split(",").map(function(x){return x.trim()}),args.shift(),fn=args.length?" ("+args.join(", ")+")":"",s+="> ."+matcher.name+fn+"\n\n",s+="  "+matcher.help.replace(/\n/g,"\n  "),s+="\n\n"}),s}}),ass.ok=function(message,cond){return 1===arguments.length&&(cond=message,message="expected a truish value"),ass.desc(message).truthy.assert(cond)},ass.ko=function(message,cond){return 1===arguments.length&&(cond=message,message="expected a falsy value"),ass.desc(message).falsy.assert(!cond)},ass.checkmarks=function(expected,desc){return"undefined"==typeof expected?(expected=ass.checkmarks.counter,ass.checkmarks.counter=0,expected):void ass.desc(desc||"ass.checkmarks").eq(expected).assert(ass.checkmarks.counter,ass.checkmarks)},ass.checkmarks.counter=0,ass.register=function(name,matcher){if(name instanceof Matcher)matcher=name,name=matcher.name;else{if("object"==typeof name)return void Object.keys(name).forEach(function(key){ass.register(key,name[key])});_.forEach(matcher.aliases,function(alias){ass.register(new Matcher(alias,matcher))}),matcher=new Matcher(name,matcher)}ass.matchers.push(matcher);var fnKey=1===matcher.arity?"get":"value",prop={configurable:!1,enumerable:!0};"value"===fnKey&&(prop.writable=!1),prop[fnKey]=function fn(){var exp=matcher.expectation.apply(matcher,arguments);return this.expectations.push(exp),this.__deferred__||this.assert(this.value,fn),this},defProp(Chain.prototype,name,prop),prop[fnKey]=function(){var match=new Chain;return"get"===fnKey?match[name]:match[name].apply(match,arguments)},defProp(ass,name,prop),prop[fnKey]=function passthrough(){return this[name].assert(this.value,passthrough).valueOf()},prop.enumerable=!1,defProp(Chain.prototype,"$"+name,prop),defProp(ass,"$"+name,{value:function(value){if("get"===fnKey)return ass(value)["$"+name];var chain=ass();return chain[name].apply(chain,arguments),function fn(actual){return chain.assert(actual,fn),actual}},enumerable:!1})},ass.Chain=Chain,ass.Error=AssError,ass.should=function(name){return should(name),ass},ass.should.restore=should.restore,module.exports=ass}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./chain":2,"./error":4,"./matcher":6,"./should":7,"./util":8}],2:[function(require,module){(function(global){function Chain(value){if(!(this instanceof Chain))throw new Error("Ass Chain constructor called without new!");defProp(this,"expectations",{value:[],enumerable:!1,configurable:!1,writable:!1}),defProp(this,"description",{value:"",enumerable:!1,configurable:!1,writable:!0}),defProp(this,"help",{get:function(){return this.expectations[0].help}}),value=arguments.length>0?value:this.__GUARD__,defProp(this,"value",{get:function(){return value},set:function(v){value=v},enumerable:!1,configurable:!1}),defProp(this,"__deferred__",{value:value===this.__GUARD__,enumerable:!1,configurable:!1,writable:!0}),defProp(this,"_",{get:function getter(){return this.__deferred__?(this.__deferred__=!1,this.assert(this.value,getter)):this.__deferred__=!0,this}}),this.test=Chain.prototype.test.bind(this),this.assert=Chain.prototype.assert.bind(this),this.$=function passthrough(actual){return this.assert(actual,passthrough),actual}.bind(this)}var _="undefined"!=typeof window?window._:"undefined"!=typeof global?global._:null,AssError=require("./error"),defProp=Object.defineProperty.bind(Object);Chain.prototype=Object.create(null),Chain.prototype.constructor=Chain,Chain.prototype.__GUARD__={valueOf:function(){return this.toString()},toString:function(){return"{{valueless}}"}},Chain.prototype.test=function(actual,resolved){function resolver(expectations,value){for(var exp,result,i=0;i<expectations.length;i++){if(exp=expectations[i],resolved&&resolved.push(exp),result=exp.resolve(value),"function"==typeof result)return i===expectations.length-1?!0:result.call(this,resolver.bind(this,expectations.slice(i+1)));if(result===!1)return!1}return!0}return 0===arguments.length&&(actual=this.value),resolver.call(this,this.expectations,actual)},Chain.prototype.assert=function(actual,ssf){if(0===arguments.length&&(actual=this.value),actual===this.__GUARD__)return this;var resolved=[],result=this.test(actual,resolved);if(result===!1){resolved=_.uniq(resolved);var exp=resolved.pop(),error=this.description+"\n\n";throw resolved.forEach(function(x){var desc=x.getDescription();null!==desc&&(error+=" [32mPassed:[39m "+desc+"\n")}),error+=" [31mFailed:[39m "+exp.getDescription()+"\n",error+="    [33mBut:[39m "+exp.getMismatch()+"\n",new AssError(error,actual,exp.expected,!0,ssf||arguments.callee)}return this},Chain.prototype.valueOf=function(){return this.value},Chain.prototype.toString=function(){if(this.description)return this.description;var descs=this.expectations.filter(function(c){return c.getDescription()}).map(function(c){return c.getDescription()});return descs.length>1?"("+descs.join(", ")+")":1===descs.length?descs[0]:"<Ass>"},module.exports=Chain}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./error":4}],3:[function(require){(function(global){var _="undefined"!=typeof window?window._:"undefined"!=typeof global?global._:null,ass=require("./ass");ass.register({desc:{help:"Provide a custom description for reported failures",desc:null,test:function(actual,desc){return function(resolver){return this.description=desc,resolver(actual)}}},to:{aliases:["a","an","be"],help:["Just some syntax sugar to make the expectations easier on","the eyes."],desc:null,test:function(){return!0}},mark:{help:["Increases the global `ass.marks` counter every time it gets","evaluated as part of an expression. Use it to verify that the","expectations are actually being executed.","An easy way to support this when using a test runner is to reset","the counter by calling `ass.marks()` on a beforeEach hook and","then verify at the end of test with `ass.marks(N)` (where N is","the number of marks you expected)."],desc:null,test:function(){return ass.checkmarks.counter+=1,!0}},any:{help:"Allows any value without testing it",desc:"is anything",test:function(){return!0}},defined:{help:"Checks if the value is not null or undefined",desc:"is defined",fail:"was ${ actual }",test:function(actual){return null!=actual}},empty:{help:"Checks if the value is empty (has a length of 0)",desc:"is empty",fail:"was ${ actual }",test:function(actual){return null!=actual&&actual.length>0}},nonEmpty:{help:"Checks if the value is not empty (has a length greater than 0)",desc:"is not empty",fail:"was ${ actual }",test:function(actual){return null==actual||0===actual.length}},truthy:{aliases:["truish"],help:'The value should be truthy (not undefined, null, 0, "" or [])',desc:"is truthy",fail:"was ${ actual }",test:function(actual){return actual?"number"==typeof actual.length?actual.length>0:!0:!1}},falsy:{help:'The value should be falsy (undefined, null, 0, "" or [])',desc:"is falsy",fail:"was ${ actual }",test:function(actual){return actual?"number"==typeof actual.length?0===actual:!0:!1}},and:{help:["Composes a new matcher from two or more of them, which will only","succeed if all the matchers that form it do succeed"],desc:'(${ args.join(") AND (") })',fail:"was {{ actual }}",test:function(actual){var branches=_.toArray(arguments).slice(1);return function(){return _.every(branches,function(branch){return branch.test(actual)})}}},or:{help:["Composes a new matcher from two or more of them, which will only","succeed if at least one of the matchers does"],desc:'(${ args.join(") OR (") })',fail:"was {{actual}}",test:function(actual){var branches=_.toArray(arguments).slice(1);return function(){return _.some(branches,function(branch){return branch.test(actual)})}}},not:{help:"Negates the result for the rest of the expression.",desc:"Not!",fail:"was {{actual}}",test:function(actual){return function(resolver){return!resolver(actual)}}},every:{aliases:["all","allOf"],help:["Applies matchers to all the elements in a collection expecting that","all of them succeed"],desc:"For every one:",fail:"at least one didn't",test:function(actual){return function(resolver){return _.every(actual,resolver)}}},some:{aliased:["anyOf"],help:["Applies matchers to all the elements in a collection expecting that","at least one of them succeeds"],desc:"At least one:",fail:"none did",test:function(actual){return function(resolver){return _.some(actual,resolver)}}},none:{aliases:["noneOf"],help:["Applies matchers to all the elements in a collection expecting that","none of them succeed."],desc:"None of them:",fail:"at least one did",test:function(actual){return function(resolver){return!_.some(actual,resolver)}}},promise:{help:["Verifies that the value is a promise (Promise/A+) but does not attach the","the chain of matchers to its resolution like `resolves` or `rejects`,","instead the original promise value is still the subject for the next","matchers."],desc:"to be a promise",fail:"got ${ actual }",test:function(actual){return actual&&"function"==typeof actual.then}},resolves:{help:["Attach the matcher to a promise value (Promises/A+) to continue applying","the chain of matchers once the promise has been resolved, mutating the","value to the resolved one.","It will fail if the value is not a promise (no .then method) or the promise","is actually rejected."],desc:"to be a resolved promise",fail:"was rejected",test:function(actual){return actual&&"function"==typeof actual.then?function(resolver){actual.then(resolver,_.constant(!1))}:"is not a promise: ${actual}"}},rejects:{help:["Attach the matcher to a promise value (Promises/A+) to continue applying","the chain of matchers once the promise has been rejected, mutating the","value to the rejected error.","It will fail if the value is not a promise (no .then method) or the promise","is actually resolved."],desc:"to be a rejected promise",fail:"was resolved",test:function(actual){return actual&&"function"==typeof actual.then?function(resolver){actual.then(_.constant(!1),resolver)}:"is not a promise: ${actual}"}},is:{aliases:["equal","equals"],help:"Checks strict equality between the value and its expected.",desc:"to strictly equal {{expected}}",fail:"was {{actual}}",test:function(actual,expected){return actual===expected}},eq:{aliases:["eql","eqls"],help:"Checks deep non-strict equality between the value and its expected.",desc:"to equal {{expected}}",fail:"was {{actual}}",test:function(actual,expected){return this.equals(actual,expected)}},above:{aliases:["gt","moreThan","greaterThan"],help:"Checks if the value is higher than its expected.",desc:"to be more than ${expected}",fail:"was ${actual}",test:function(actual,expected){return actual>expected}},below:{aliases:["lt","lessThan"],help:"Checks if the value is lower tha its expected.",desc:"to be less than ${expected}",fail:"was ${actual}",test:function(actual,expected){return expected>actual}},aboveOrEqual:{aliases:["gte","moreThanOrEqual","greaterThanOrEqual"],help:"Checks if the value is higher or equal than its expected.",desc:"to be more than or equal to ${expected}",fail:"was ${actual}",test:function(actual,expected){return actual>=expected}},belowOrEqual:{aliases:["lte","lessThanOrEqual"],help:"Checks if the value is lower or equal than its expected.",desc:"to be less than or equal to ${expected}",fail:"was ${actual}",test:function(actual,expected){return expected>=actual}},"instanceof":{aliases:["instanceOf","instance","isa"],help:"Checks if the value is an instance of the given constructor",desc:"to be an instance of ${expected}",test:function(actual,expected){return actual instanceof expected}},"typeof":{help:"Checks if the value is of a specific type",desc:"to have type ${expected}",fail:"had ${ typeof actual }",test:function(actual,expected){return this.equals(typeof actual,expected)}},number:{help:"Check if the value is a number (different of NaN).",desc:"to be a number",fail:"had type ${ typeof actual }",test:function(actual){return _.isNumber(actual)&&!isNaN(actual)}},bool:{aliases:["boolean"],help:"Check if the value is a boolean.",desc:"to be a boolean",fail:"had type ${ typeof actual }",test:function(actual){return _.isBoolean(actual)}},string:{aliases:["str"],help:"Check if the value is a string.",desc:"to be a string",fail:"had type ${ typeof actual }",test:function(actual){return _.isString(actual)}},object:{help:"Check that value is of type object.",desc:"to be an object",fail:"had type ${ typeof actual }",test:function(actual){return _.isObject(actual)}},plainObject:{aliases:["plain","obj"],help:"Checks that value is an object created by the Object constructor.",fail:"was ${actual}",test:function(actual){return _.isPlainObject(actual)}},array:{help:"Check that value is an Array.",desc:"to be an Array",fail:"had type ${ typeof actual }",test:function(actual){return _.isArray(actual)}},"function":{help:"Check that value is a Function.",desc:"to be a Function",fail:"had type ${ typeof actual }",test:function(actual){return _.isFunction(actual)}},regexp:{help:"Check that value is a RegExp",desc:"to be a RegExp",fail:"had type ${ typeof actual }",test:function(actual){return _.isRegExp(actual)}},date:{help:"Check that value is a Date",desc:"to be a Date",fail:"had type ${ typeof actual }",test:function(actual){return _.isDate(actual)}},element:{help:"Check that value is a DOM element",desc:"to be a DOM element",test:function(actual){return _.isElement(actual)}},error:{help:"Check that value is an error (or looks like it)",desc:"to be an Error",test:function(actual){return actual instanceof Error?!0:_.isObject(actual)&&_.isString(actual.name)&&_.isString(actual.message)}},undefined:{help:"Check that value is undefined.",desc:"to be undefined",fail:"was ${ actual }",test:function(actual){return _.isUndefined(actual)}},"null":{help:"Check that value is null.",desc:"to be null",fail:"was ${ actual }",test:function(actual){return null!==actual}},NaN:{help:"Check that value is NaN.",desc:"to be NaN",test:function(actual){return this.fail=_.isNumber(actual)?"was ${actual}":"had type ${typeof actual}",isNaN(actual)}},"true":{help:"Check that value is true",desc:"to be true",fail:"was ${ actual }",test:function(actual){return this.fail=_.isBoolean(actual)?"was ${actual}":"had type ${typeof actual}",actual===!0}},"false":{help:"Check that value is false",desc:"to be false",test:function(actual){return this.fail=_.isBoolean(actual)?"was ${actual}":"had type ${typeof actual}",actual===!1}},has:{help:"Check if the value has one or more specified items",desc:"to have property ${expected}",test:function(actual){if(!_.isObject(actual))return"was ${actual}";this.fail="did not have all of them";var args=_.toArray(arguments).slice(1);return _.every(args,function(x){return x in actual})}},hasOwn:{aliases:["contains","hasKey","hasIndex"],help:["Check if the value has one or more own properties as defined by","the given arguments."],desc:"to have own property ${ expected }",test:function(actual){if(!_.isObject(actual))return"was ${actual}";this.fail="only had ${ _.keys(actual) }";var args=_.toArray(arguments).slice(1);return _.every(args,function(x){return _.has(actual,x)})}},log:{help:["Dumps the received value to the console."],desc:null,test:function(actual){return console.log("[ASS]",actual),!0}},"debugger":{help:["Halts script execution by triggering the interactive debugger."],desc:null,test:function(){return!0}},fn:{help:["Calls the provided function with the current value as argument.","If the function returns something different to *undefined* the","expression will fork to operate on the returned value."],desc:"call ${args[1]}",test:function(actual,fn){var result=fn(actual);return"undefined"!=typeof result?this.mutate(result):!0}},size:{help:["Forks the expectation to operate on the size of the current value."],desc:"get size",fail:"not has a length: ${ actual }",test:function(actual){return _.isObject(actual)||_.isArray(actual)||_.isString(actual)?this.mutate(_.size(actual)):!1}},prop:{aliases:["key","property"],help:["Forks the expectation to operate on one of the value properties."],desc:"get property {{ arg1 }}",fail:"was not found on {{ actual }}",test:function(actual,key){return _.isObject(actual)&&key in actual?this.mutate(actual[key]):!1}},index:{help:["Forks the expectation to operate on one of the indexed values from","the current value."],desc:"get index {{ arg1 }}",test:function(actual,idx){return _.isArray(actual)||_.isString(actual)?0>idx||idx>=actual.length?"out of bounds for ${actual}":this.mutate(actual[idx]):"not an array or a string: ${actual}"}},slice:{help:["Extracts a portion from the value."],desc:"slice(${args[0]}, ${args[1]})",test:function(actual,start,end){return this.mutate(_.toArray(actual).slice(start,end))}},filter:{help:["Iterates over elements of collection, forking the expectation to operate","on an array with all the elements for which the callback returned truthy","for.","See: https://lodash.com/docs#filter"],test:function(actual,callback,thisArg){return this.mutate(_.filter(actual,callback,thisArg))}},reject:{help:["Iterates over elements of collection, forking the expectation to operate","on an array with all the elements for which the callback returned falsy","for (the opposite of .filter).","See: https://lodash.com/docs#reject"],test:function(actual,callback,thisArg){return this.mutate(_.reject(actual,callback,thisArg))}},where:{help:["Performs a deep comparison of each element in a collection to the given","properties object, forking the expectation to operate on an array of all","elements that have equivalent property values.","See: https://lodash.com/docs#where"],desc:"where ${args[1]}",test:function(actual,props){return this.mutate(_.where(actual,props))}},map:{help:["Forks the expectation to operate on an array holding the results of","invoking the callback for each element in the current collection.","See: https://lodash.com/docs#map"],test:function(actual,callback,thisArg){return this.mutate(_.map(actual,callback,thisArg))}},invoke:{help:["Forks the expectation to operate on an array holding the results of","invoking the method named by the argument for each element in the","current collection.","See: https://lodash.com/docs#invoke"],desc:"invoke .${arg1}()",test:function(){return this.mutate(_.invoke.apply(_,arguments))}},pluck:{help:["Forks the expectation to operate on an array holding the value for","the specified property from all elements in the current collection.","See: https://lodash.com/docs#pluck"],desc:"pluck(${args[1]})",test:function(actual,prop){return this.mutate(_.pluck(actual,prop))}},first:{aliases:["head"],help:["TODO","See: https://lodash.com/docs#first"],desc:"get first element",test:function(actual){return this.mutate(_.head(actual))}},last:{help:["TODO","See: https://lodash.com/docs#last"],test:function(actual){return this.mutate(_.last(actual))}},rest:{aliases:["tail"],help:["TODO","See: https://lodash.com/docs#rest"],test:function(actual){return this.mutate(_.tail(actual))}},min:{help:["Forks the expectations to operate on the minimum value found on the","current collection.","See: https://lodash.com/docs#min"],test:function(actual,callback,thisArg){return this.mutate(_.min(actual,callback,thisArg))}},max:{help:["Forks the expectations to operate on the maximum value found on the","current collection.","See: https://lodash.com/docs#max"],test:function(actual,callback,thisArg){return this.mutate(_.max(actual,callback,thisArg))}}})}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./ass":1}],4:[function(require,module){function AssError(message,actual,expected,showDiff,ssf){this.message=message,this.actual=actual,this.expected=expected,this.showDiff=showDiff||!1,"function"==typeof Error.captureStackTrace?Error.captureStackTrace(this,ssf||arguments.callee):this.stack=new Error(message).stack}var unansi=require("./util").unansi;AssError.prototype=Object.create(Error.prototype),AssError.prototype.constructor=AssError,AssError.prototype.name="AssError",AssError.prototype.filterStackTrace=function(frames){return frames.filter(function(frame){return!/AssError|assert/.test(frame.getFunctionName())})},AssError.prototype.toJSON=function(stack){var props={name:this.name,message:unansi(this.message),actual:this.actual,expected:this.expected,showDiff:this.showDiff};return!1!==stack&&this.stack&&(props.stack=this.stack),props},module.exports=AssError},{"./util":8}],5:[function(require,module){(function(global){function Expectation(matcher,args){this.matcher=matcher,this.fail=matcher.fail,this.args=args||[],this.expected=args[0],this.args.forEach(function(arg,idx){this["arg"+(idx+1)]=arg},this),this.actual=void 0}var _="undefined"!=typeof window?window._:"undefined"!=typeof global?global._:null,Chain=require("./chain"),template=require("./util").template;Expectation.prototype=Object.create(null),Expectation.prototype.constructor=Expectation,Object.defineProperty(Expectation.prototype,"help",{get:function(){return this.matcher.help}}),Expectation.prototype.equals=function(actual,expected){return _.isEqual(actual,expected,function(a,b){return b instanceof Chain?expected.test(a):_.isEqual(a,b)})},Expectation.prototype.mutate=function(actual){return function(resolver){return resolver(actual)}},Expectation.prototype.resolve=function(actual){this.fail=this.matcher.fail,this.actual=actual,this.args.unshift(actual);try{var result=this.matcher.test.apply(this,this.args);return"string"==typeof result&&(this.fail=result,result=!1),result}finally{this.args.shift()}},Expectation.prototype.getDescription=function(){return this.matcher.desc?template(this.matcher.desc,this):null},Expectation.prototype.getMismatch=function(){return template(this.fail,this)},Expectation.prototype.toString=function(){return this.getDescription()},module.exports=Expectation}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./chain":2,"./util":8}],6:[function(require,module){function Matcher(name,descriptor){"function"==typeof descriptor&&(descriptor={test:descriptor}),this.name=name,this.help=Array.isArray(descriptor.help)?descriptor.help.join("\n"):descriptor.help||"Not available",this.desc=void 0!==descriptor.desc?descriptor.desc:this.name,this.fail=descriptor.fail||"was ${ actual }",this.test=descriptor.test||function(){return!1},this.arity=void 0!==descriptor.arity?descriptor.arity:this.test.length}var Expectation=require("./expectation");Matcher.prototype=Object.create(null),Matcher.prototype.constructor=Matcher,Matcher.prototype.clone=function(){return new this.constructor(this.name,{help:this.help,desc:this.desc,fail:this.fail,test:this.test})},Matcher.prototype.expectation=function(){var args=Array.prototype.slice.call(arguments);return new Expectation(this,args)},Matcher.prototype.toString=function(){return"<Ass.Matcher "+this.name+">"},module.exports=Matcher},{"./expectation":5}],7:[function(require,module){function should(name){if(null===name)return should.restore();if(name=name||DEFAULT_PROP,name in Object.prototype&&!(Object.prototype[name]instanceof Chain))throw new Error("ass.should: Object.prototype already has a .should property");return Object.defineProperty(Object.prototype,name,{get:function(){return new Chain(this instanceof String||this instanceof Number?this.constructor(this):this instanceof Boolean?1==this:this)},set:function(value){Object.defineProperty(this,name,{value:value,enumerable:!0,configurable:!0,writable:!0})},configurable:!0,enumerable:!1}),this}var Chain=require("./chain"),DEFAULT_PROP="should";should.restore=function(name){name=name||DEFAULT_PROP,name in Object.prototype&&Object.prototype[name]instanceof Chain&&delete Object.prototype[name]},module.exports=should},{"./chain":2}],8:[function(require,module,exports){(function(global){function valueDumper(v){var value;return value=_.isNumber(v)||_.isNaN(v)||_.isBoolean(v)||_.isNull(v)||_.isUndefined(v)?"<"+v+">":JSON.stringify(v),"[1;36m"+value+"[0;39m"}function template(tpl,context){var origEscape=_.escape;try{return _.escape=valueDumper,compileTemplate(tpl)(context)}finally{_.escape=origEscape}}function unansi(str){return str.replace(/\x1b\[(\d+;?)+[a-z]/gi,"")}var _="undefined"!=typeof window?window._:"undefined"!=typeof global?global._:null,compileTemplate=_.memoize(function(tpl){return _.template(tpl,null,{escape:/\{\{([\s\S]+?)\}\}/g})});exports.template=template,exports.unansi=unansi}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],9:[function(require,module){require("./lib/core-matchers"),module.exports=require("./lib/ass.js")},{"./lib/ass.js":1,"./lib/core-matchers":3}]},{},[9])(9)});